export default {
  name: 'works',
  aliases: ['work'],
  args: false,
  description:
    'Gerencia sistema de empregos - lista trabalhos ou executa trabalho atual',
  group_only: true,
  bot_owner_only: false,
  group_admin_only: false,

  execute: async ({ client, message, args, prefix }) => {
    const chatId = message.chatId;
    const senderId = message.sender.id.replace('@c.us', '');
    const { User, Transaction } = client.db;

    const JOBS_CONFIG = {
      1: {
        name: 'Motorista',
        salary: 100,
        xpPerJob: 20,
        xpForNextLevel: 100,
        cooldownMinutes: 10,
        emoji: 'üöó',
        description: 'Transporte passageiros pela cidade',
        requirements: 'Nenhum',
      },
      2: {
        name: 'Cozinheiro',
        salary: 150,
        xpPerJob: 25,
        xpForNextLevel: 120,
        cooldownMinutes: 15,
        emoji: 'üë®‚Äçüç≥',
        description: 'Prepare refei√ß√µes em restaurantes',
        requirements: 'N√≠vel 2+',
      },
      3: {
        name: 'Professor',
        salary: 200,
        xpPerJob: 30,
        xpForNextLevel: 140,
        cooldownMinutes: 20,
        emoji: 'üë®‚Äçüè´',
        description: 'Ensine alunos em escolas',
        requirements: 'N√≠vel 3+',
      },
      4: {
        name: 'Programador',
        salary: 300,
        xpPerJob: 40,
        xpForNextLevel: 160,
        cooldownMinutes: 25,
        emoji: 'üíª',
        description: 'Desenvolva sistemas e aplicativos',
        requirements: 'N√≠vel 5+',
      },
      5: {
        name: 'M√©dico',
        salary: 400,
        xpPerJob: 50,
        xpForNextLevel: 180,
        cooldownMinutes: 30,
        emoji: 'üë®‚Äç‚öïÔ∏è',
        description: 'Atenda pacientes em hospitais',
        requirements: 'N√≠vel 8+',
      },
    };

    const formatCooldown = (minutes) => {
      if (minutes >= 60) {
        const hours = Math.floor(minutes / 60);
        const mins = minutes % 60;
        return `${hours}h${mins ? ` ${mins}min` : ''}`;
      }
      return `${minutes} minutos`;
    };

    const formatTimeRemaining = (ms) => {
      const totalMinutes = Math.ceil(ms / 60000);
      if (totalMinutes >= 60) {
        const hours = Math.floor(totalMinutes / 60);
        const mins = totalMinutes % 60;
        return `${hours}h${mins ? ` ${mins}min` : ''}`;
      }
      return `${totalMinutes} minutos`;
    };

    const showJobsList = async (userLevel = 1) => {
      let listMsg = 'üëú *Lista de empregos dispon√≠veis:* \n\n';

      Object.entries(JOBS_CONFIG).forEach(([id, job]) => {
        const requiredLevel = job.requirements.includes('N√≠vel')
          ? parseInt(job.requirements.replace('N√≠vel ', '').replace('+', ''))
          : 0;
        const canAccess = userLevel >= requiredLevel;

        listMsg += `${job.emoji} *${id}. ${job.name}*\n`;
        listMsg += `üíµ Sal√°rio: R$${job.salary.toLocaleString(
          'pt-BR'
        )}/trabalho\n`;
        listMsg += `üìà XP: ${job.xpPerJob}/trabalho\n`;
        listMsg += `‚è≥ Cooldown: ${formatCooldown(job.cooldownMinutes)}\n`;
        listMsg += `üìù ${job.description}\n`;
        listMsg += `üîë Requisitos: ${job.requirements}\n`;
        listMsg += canAccess ? '‚úÖ Dispon√≠vel\n\n' : '‚ùå Indispon√≠vel\n\n';
      });

      listMsg += `\nüí° Use *${prefix}works <n√∫mero>* para escolher um emprego\n`;
      listMsg += `üõ†Ô∏è Use *${prefix}work* para realizar seu trabalho atual`;

      await client.reply(chatId, listMsg, message.id);
    };

    const initializeUserData = (user) => {
      if (!user) return null;
      if (!user.economy) user.economy = { cash: 0, bank: 0 };
      if (!user.stats)
        user.stats = {
          jobsDone: 0,
          xp: 0,
          level: 1,
          totalEarned: 0,
          energy: 100,
          health: 100,
        };
      if (!user.cooldowns) user.cooldowns = {};
      if (!user.job) user.job = null;
      // Garantir energy e health existam
      user.stats.energy = user.stats.energy ?? 100;
      user.stats.health = user.stats.health ?? 100;
      return user;
    };

    const getUser = async () => {
      try {
        const user = await User.findOne({ phone: senderId });
        return initializeUserData(user);
      } catch (error) {
        console.error('Erro ao buscar usu√°rio:', error);
        return null;
      }
    };

    try {
      const commandUsed = message.body.toLowerCase().split(' ')[0];
      const isWorkCmd = commandUsed === `${prefix}work`;
      const isWorksCmd = commandUsed === `${prefix}works`;

      if (isWorkCmd) {
        const user = await getUser();
        if (!user) {
          await client.reply(
            chatId,
            '‚ùå Voc√™ n√£o est√° registrado!',
            message.id
          );
          return;
        }

        if (!user.job) {
          await client.reply(
            chatId,
            `üîç *Voc√™ n√£o tem um emprego!*\n\nUse *${prefix}works* para escolher um trabalho.`,
            message.id
          );
          await showJobsList(user.stats.level);
          return;
        }

        // Verifica energia e sa√∫de m√≠nima para trabalhar
        const minEnergy = 20;
        const minHealth = 30;

        if (user.stats.energy < minEnergy) {
          return await client.reply(
            chatId,
            `‚ùå Voc√™ est√° sem energia suficiente para trabalhar!\n` +
              `Energia atual: ${user.stats.energy}/100\n` +
              `Descanse para recuperar energia.`,
            message.id
          );
        }

        if (user.stats.health < minHealth) {
          return await client.reply(
            chatId,
            `‚ùå Sua sa√∫de est√° muito baixa para trabalhar!\n` +
              `Sa√∫de atual: ${user.stats.health}/100\n` +
              `Cuide-se para recuperar sa√∫de.`,
            message.id
          );
        }

        const jobConfig = Object.values(JOBS_CONFIG).find(
          (j) => j.name === user.job.name
        );
        if (!jobConfig) {
          await client.reply(
            chatId,
            'üîÑ *Trabalho removido!*\nSeu cargo atual n√£o existe mais.\nEscolha um novo trabalho:',
            message.id
          );
          await showJobsList(user.stats.level);
          return;
        }

        const now = new Date();
        const cooldownExpires = user.cooldowns.work
          ? new Date(user.cooldowns.work)
          : null;

        if (cooldownExpires && cooldownExpires > now) {
          const remainingMs = cooldownExpires.getTime() - now.getTime();
          return await client.reply(
            chatId,
            `‚è≥ *Aguarde para trabalhar novamente!*\n\n` +
              `Voc√™ poder√° trabalhar em *${formatTimeRemaining(
                remainingMs
              )}*\n` +
              `‚è∞ Pr√≥ximo hor√°rio: ${cooldownExpires.toLocaleTimeString(
                'pt-BR'
              )}`,
            message.id
          );
        }

        // Paga sal√°rio e adiciona XP
        const balanceBefore = user.economy.cash;
        user.economy.cash += jobConfig.salary;
        const balanceAfter = user.economy.cash;

        user.stats.jobsDone++;
        user.stats.xp += jobConfig.xpPerJob;
        user.stats.totalEarned =
          (user.stats.totalEarned || 0) + jobConfig.salary;

        // Consome energia e sa√∫de
        user.stats.energy -= 15; // ajuste o valor conforme quiser
        if (user.stats.energy < 0) user.stats.energy = 0;

        user.stats.health -= 5; // ajuste o valor conforme quiser
        if (user.stats.health < 0) user.stats.health = 0;

        // Checar level up (pode subir m√∫ltiplos n√≠veis)
        let leveledUp = false;
        while (user.stats.xp >= jobConfig.xpForNextLevel) {
          user.stats.level++;
          user.stats.xp -= jobConfig.xpForNextLevel;
          leveledUp = true;
        }

        user.cooldowns.work = new Date(
          now.getTime() + jobConfig.cooldownMinutes * 60000
        );

        // Registra transa√ß√£o
        await Transaction.create({
          type: 'income',
          amount: jobConfig.salary,
          description: `Sal√°rio recebido como ${user.job.name}`,
          source: 'work',
          relatedUser: user._id,
          balanceBefore,
          balanceAfter,
          metadata: {
            jobName: user.job.name,
            jobLevel: user.stats.level,
          },
          createdAt: new Date(),
        });

        await user.save();

        let levelUpMsg = '';
        if (leveledUp) {
          levelUpMsg =
            '\n\nüåü *Promo√ß√£o!* üåü\n' +
            `Voc√™ alcan√ßou o n√≠vel ${user.stats.level}!\n` +
            'Novos empregos podem estar dispon√≠veis!';
        }

        await client.reply(
          chatId,
          'üìÑ *Relat√≥rio de trabalho:* \n\n' +
            `üë®‚Äçüíº Cargo: ${jobConfig.emoji} *${user.job.name}*\n` +
            `üí∞ Sal√°rio: R$${jobConfig.salary.toLocaleString('pt-BR')}\n\n` +
            'üìä *Progresso*\n' +
            `‚ñ∏ N√≠vel: ${user.stats.level}\n` +
            `‚ñ∏ XP: ${user.stats.xp}/${jobConfig.xpForNextLevel}\n` +
            `‚ñ∏ Total realizado: ${user.stats.jobsDone} trabalhos\n` +
            `‚è≥ Pr√≥ximo trabalho: ${formatCooldown(
              jobConfig.cooldownMinutes
            )}\n` +
            `üîã Energia restante: ${user.stats.energy}/100\n` +
            `‚ù§Ô∏è Sa√∫de restante: ${user.stats.health}/100` +
            levelUpMsg,
          message.id
        );
        return;
      }

      if (isWorksCmd && args.length === 0) {
        const user = await getUser();
        if (!user) {
          await client.reply(
            chatId,
            '‚ùå Voc√™ n√£o est√° registrado!',
            message.id
          );
          return;
        }
        return await showJobsList(user.stats.level);
      }

      if (isWorksCmd && args.length > 0) {
        const jobNumber = parseInt(args[0]);
        const user = await getUser();
        if (!user) {
          await client.reply(
            chatId,
            '‚ùå Voc√™ n√£o est√° registrado!',
            message.id
          );
          return;
        }

        if (isNaN(jobNumber)) {
          return await client.reply(
            chatId,
            `‚ùå *N√∫mero inv√°lido!*\nUse *${prefix}works <n√∫mero>*\nExemplo: *${prefix}works 2* para virar Cozinheiro`,
            message.id
          );
        }

        const selectedJob = JOBS_CONFIG[jobNumber];
        if (!selectedJob) {
          return await client.reply(
            chatId,
            `üîç *Emprego n√£o encontrado!*\nO n√∫mero ${jobNumber} n√£o √© v√°lido.\nUse *${prefix}works* para ver a lista completa.`,
            message.id
          );
        }

        const requiredLevel = selectedJob.requirements.includes('N√≠vel')
          ? parseInt(
              selectedJob.requirements.replace('N√≠vel ', '').replace('+', '')
            )
          : 0;

        if (user.stats.level < requiredLevel) {
          return await client.reply(
            chatId,
            `üîí *Requisitos n√£o atendidos!*\nPara ser ${selectedJob.name} voc√™ precisa:\n‚ñ∏ N√≠vel ${requiredLevel} (atual: ${user.stats.level})\nContinue trabalhando para desbloquear!`,
            message.id
          );
        }

        const previousJob = user.job?.name || null;
        user.job = {
          name: selectedJob.name,
          salary: selectedJob.salary,
          startedAt: new Date(),
        };

        await user.save();

        await client.reply(
          chatId,
          '*üéâ Contrata√ß√£o conclu√≠da!* \n\n' +
            (previousJob
              ? `Voc√™ mudou de *${previousJob}* para:\n`
              : 'Parab√©ns pelo seu primeiro emprego!\n') +
            `\n${selectedJob.emoji} *${selectedJob.name.toUpperCase()}*\n` +
            `üìå ${selectedJob.description}\n\n` +
            'üìã *Detalhes do cargo*\n' +
            `‚ñ∏ Sal√°rio: R$${selectedJob.salary.toLocaleString('pt-BR')}\n` +
            `‚ñ∏ XP por trabalho: ${selectedJob.xpPerJob}\n` +
            `‚ñ∏ Intervalo: ${formatCooldown(selectedJob.cooldownMinutes)}\n\n` +
            `üí° Use *${prefix}work* para come√ßar a trabalhar!`,
          message.id
        );
        return;
      }
    } catch (error) {
      console.error('Erro no comando works:', error);
      await client.reply(
        chatId,
        '‚ùå Ocorreu um erro. Tente novamente.',
        message.id
      );
    }
  },
};
